#include "reduce-function.h"
#include"result_histogram.h"

void myReduce( gl_types::iscope& scope, 
                            graphlab::any& accumulator){
         
	MyNode& vdata = scope.vertex_data();
	
	
        tr1::shared_ptr<MyResult> result = accumulator.as<tr1::shared_ptr<MyResult> >();
	
	size_t max_vote = vdata.histogram.size();
	if(max_vote>result->histogram.size()){
		result->histogram.resize(max_vote, 0);
	}
	if (result->hist_read_ids.find(vdata.read_id) == result->hist_read_ids.end()){
	 cerr<< "\ncome here!!!!!!!!!!!!!!!!!\n";
		foreach(graphlab::edge_id_t eid, scope.out_edge_ids()) {
        		MyNode& neighbor =  scope.neighbor_vertex_data(scope.target(eid));
			result->hist_read_ids.insert(neighbor.read_id);
		}
		for (int i = 0; i < vdata.histogram.size(); ++i){
			result->histogram[i] += vdata.histogram[i];
		}			
	}
	
	if (  vdata.read_id == 1){
		cerr << "\nHistogram for readid " << vdata.read_id << "\n";
		for(size_t i=0; i<vdata.histogram.size(); i++){
		    cerr<<result->histogram[i] << ' ';
		}
		cerr << "\n"; 
        }
	
	
}

void apply(graphlab::any& current_data, 
                          const graphlab::any& new_data){
        cerr << "\nApply Function\n";
	//current_data.as<tr1::shared_ptr<MyResult>> = (MyResult)new_data.as<tr1::shared_ptr<MyResult>>();
}
void merge(graphlab::any& target, 
                          const graphlab::any& source) {
     tr1::shared_ptr<MyResult> source_result = source.as<tr1::shared_ptr<MyResult> >();
     tr1::shared_ptr<MyResult> target_result = target.as<tr1::shared_ptr<MyResult> >();
     size_t max_vote = source_result->histogram.size();
     if(max_vote>target_result->histogram.size()){
       target_result->histogram.resize(max_vote, 0);
     }
	if (result->hist_read_ids.find(vdata.read_id) == result->hist_read_ids.end()){
	 cerr<< "\ncome here!!!!!!!!!!!!!!!!!\n";
		foreach(graphlab::edge_id_t eid, scope.out_edge_ids()) {
        		MyNode& neighbor =  scope.neighbor_vertex_data(scope.target(eid));
			result->hist_read_ids.insert(neighbor.read_id);
		}
		for (int i = 0; i < vdata.histogram.size(); ++i){
			result->histogram[i] += vdata.histogram[i];
		}			
	}
	
	if (  vdata.read_id == 1){
		cerr << "\nHistogram for readid " << vdata.read_id << "\n";
		for(size_t i=0; i<vdata.histogram.size(); i++){
		    cerr<<result->histogram[i] << ' ';
		}
		cerr << "\n"; 
        }
                       
}
	
               
